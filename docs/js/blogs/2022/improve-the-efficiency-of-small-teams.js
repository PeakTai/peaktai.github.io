(function(n){function e(e){for(var t,c,i=e[0],l=e[1],f=e[2],a=0,s=[];a<i.length;a++)c=i[a],Object.prototype.hasOwnProperty.call(o,c)&&o[c]&&s.push(o[c][0]),o[c]=0;for(t in l)Object.prototype.hasOwnProperty.call(l,t)&&(n[t]=l[t]);p&&p(e);while(s.length)s.shift()();return u.push.apply(u,f||[]),r()}function r(){for(var n,e=0;e<u.length;e++){for(var r=u[e],t=!0,i=1;i<r.length;i++){var l=r[i];0!==o[l]&&(t=!1)}t&&(u.splice(e--,1),n=c(c.s=r[0]))}return n}var t={},o={"blogs/2022/improve-the-efficiency-of-small-teams":0},u=[];function c(e){if(t[e])return t[e].exports;var r=t[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,c),r.l=!0,r.exports}c.m=n,c.c=t,c.d=function(n,e,r){c.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},c.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},c.t=function(n,e){if(1&e&&(n=c(n)),8&e)return n;if(4&e&&"object"===typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(c.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)c.d(r,t,function(e){return n[e]}.bind(null,t));return r},c.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return c.d(e,"a",e),e},c.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},c.p="/";var i=window["webpackJsonp"]=window["webpackJsonp"]||[],l=i.push.bind(i);i.push=e,i=i.slice();for(var f=0;f<i.length;f++)e(i[f]);var p=l;u.push([13,"chunk-vendors","chunk-common"]),r()})({13:function(n,e,r){n.exports=r("5912")},5912:function(n,e,r){"use strict";r.r(e);var t=r("f2bf"),o="对于小规模的技术团队，人力有限却有众多繁杂的事情要处理，怎么样更有效的利用资源，提高开发效率呢？这篇文章我分享一些自己的看法。\n\n### 会议\n\n减少会议是有效节省时间的方法，很多时候会议没有那么多重要的内容，甚至于还要听废话车轱辘话。能不开会尽量不要开会，尤其是远程会议，由于信号问题可能更耽误时间。一些非技术性的会议，像与客户沟通等技术人员只是配角偶尔应下声，可以尽可能的减少参与的技术人员。做汇报之类的例会，可以降低频率，其实技术上的很多事，发文字消息就可以了，不是很复杂很重要的就不用开会专门讨论。\n\n### 项目进度管理\n\n项目管理很复杂，流程上必须要精简，不能像大厂一样有那么多流程。建议有个任务列表就可以了，记录分派给每位开发人员的任务，反馈的\nbug，还有新需求。不建议使用一些比较重量级的项目管理软件，还要花时间去学习，使用 excel\n简单做个表，现在有很多云协作产品，可以在线多人一起编辑表格文档，已经很方便了。对于小团队，调研审查什么的都可以省了，产品经理直接将需求写入任务列表中，积攒差不多了再统一讨论。项目的进度，可以定期开会，统一确认，然后更新上去，不必追求及时性，节省精力。\n\n### 运维\n\n于小团队，一般不会有专门的运维人员，也更不太可能搞一个机房，上云是最合理的低成本方案。既然使用了云服务，那么不要再自己搭建数据库了，使用云平台提供的数据库产品，监控和审计等功能都给你做好了，绝对比你自己搭建更省钱，而且还可以弹性伸缩。对于一些安全类的产品（防火墙等），适可而止吧，这些服务都是非常昂贵的，只有规模上去了，才能推平成本。云平台一般也会有基础的免费安全服务，像漏洞提醒，linux\n服务器可以使用命令自动更新的，先凑合着。最后，备份非常重要，服务器自动备份一定要打开，这个钱不能省。\n\n对于小团队来说，必须想办法借助于各种商业平台，不要自己搭建各种服务，除了数据库、存储等这些程序运行需要的服务，开发中可能还需要\nmaven私服、npm私服、docker镜像服务、git服务器等等，前期搭建服务的成本可能会超过项目业务开发成本。提供这些类开发托管的平台现在已经有很多了，有些平台还有免费额度。\n\n### 自动化构建\n\n大厂都在用DevOps，这是目前非常流程的开发模式，作为小团队当然也一定得搞，自动化也就意味着生产力的提升。前期的投入可能会比较大，需要学习\njenkins、docker 和 k8s 等相关知识，搭建流水线编写各种脚本做好各种配置也要耗费不少精力。但一切都是值得的，一次搭建，长期受益，在提升效率的同时，还避免了手动运维出错的问题。可以借助于代码托管平台，商业化的平台一般都提供了支持。\n\n### 代码规范与审查\n\n为了保证质量，代码一定要有规范，但是也必须得有个度，适当放宽，以提升开发效率。举个例子，checkstyle\n基于 sun 的规范默认不允许魔法数字，如果完全禁止，可能就会多很多麻烦，可以考虑关掉，让开发人员决定怎么处理，审查代码的时候注意些。规范的检查必须全部依赖于程序自动化，靠人力审查太耗精力，现在各种语言基本上都有规范检查的组件，可以把检查放在持续集成中。\n\n对于小团队，没有那么多人参与审查代码，代码可能只审查一遍，也可能没有精力看完一遍，审查代码的人还要处理别的事。那只能抓重点了，看一看关键的业务逻辑，对于重复性高的部分可以适当忽略，比如说controller 和 service 中的业务代码可以详细看下，至于绑定的表单对象和响应的 json\n对象，没空就不用看了。\n\n### UI设计\n\n在程序开发中，ui 可能是给意见的人最多，扯皮最多，改动最多，最耗精力的了。你的老板还有你的客户，他们虽然不懂技术，但是\nui 他们都是可以说上话的，发表一些自己的看法。也许你的老板或客户只是主观觉得不好看让你换种布局试试，但是等你改完，他们又觉得还是改回原来的比较好，白折腾让你难受。作为项目管理者，只能尽量去争取了，少一点折腾，多一点效率，毕竟就这么点人。其实很多大厂做的软件，界面也是难用加丑陋并伴随卡顿延迟，不行的话在讨论时可以拿这些例子挡一挡\n\n### 总结\n\n要提升生产力，节省时间是关键，一切可以省时间的环节都要想办法。小团队不必讲究那么多，适当精简流程，少扯皮，多做事。从零开始搭建是很困难的，硬件成本也高，可以借助于第三方平台，自己则专注于业务。\n   ",u=r("f373");Object(t["c"])(Object(u["a"])(o)).mount("#app")}});